# man pages for everything
man curl
man ping
man grep
man ls

# present working directory
pwd

# use bash shell
bash

# what shell am I running
# bash is command language interpreter
echo $0
echo $SHELL
cat /etc/shells

# to user home dir
cd
cd ..
cd /usr/local/bin
cd ../..

# create directory
mkdir mynewdirectory
mkdir -p mynewdirectory

# move or rename
mv mynewdirectory mydir

# copy
cp -r mydir mydir2

# delete directory
rm -r mydir2

# create file
touch file1.txt
touch file1.txt file3.txt
mkdir -p dir1
touch dir1/{file4.txt,file3.txt}

# cat file
cat file1.txt

# copy
cp file1.txt file2.txt

# delete file
rm file1.txt

# clear the terminal
clear

# ls
ls
ls -al
ls -R /home

# change ownership of file
chown chad:root file1.txt

# change just the user
chown chad file1.txt

# change just the group
chgrp root file1.txt

# take away write permissions for the group
chmod g-w file1.txt

# give executable permission to the group
chmod g+x file1.txt

# give user permission to execute
chmod u+x script.sh

# give other permissions to execute
chmod o+x script.sh

# give executable for all
chmod +x script.sh

# pipe to less
cat /var/log/syslog | less

cat /var/log/syslog | grep file

cat /var/log/syslog | grep ubuntu | less

# pipe to a file
history | grep ls > commands.txt
history | grep history >> commands.txt

# alias
alias
alias k=kubectl
alias d=docker

# find what user you are logged in as
whoami
echo $USER

hostname

# find the release info
lsb_release -a
cat /etc/os-release
uname -a
lscpu
lsmem

# go to previous command up and down arrows
# use reverse search with cmd + R
# also see all history
history
history 10

groups 

# default options for new users
useradd -D

# change from Bourne shell to Bourne Again SHell
useradd -D -s /bin/bash

useradd chad
adduser chad # will prompt for password and other info

# create user and add a home directory
sudo useradd -m chad
sudo useradd -m newuser

# Add User to Sudo Group
usermod -aG sudo chad

# add group
sudo groupadd docker
sudo addgroup devops
getent group devops

# add your user to the docker group
usermod -aG docker $USER

# delete user
userdel chad

# delete user from group
gpasswd -d chad devops

# reset password with passwd
passwd chad

# what groups user is in
groups chad
cat /etc/group

# get numeric ID’s (UID or group ID) of the current user
id
id root

# You can find the UID in the /etc/passwd file
cat /etc/passwd

# from left to right
# Name, Password (indicated with the letter (x)), UID (User ID), GID (Group ID), Gecos – Contain general information about the user and can be empty, Home directory, Shell – The path to the default shell for the user.

# A UID (user identifier) is a number assigned by Linux to each user on the system. This number is used to identify the user to the system and to determine which system resources the user can access.
# UID 0 (zero) is reserved for the root.
# Groups in Linux are defined by GIDs (group IDs).
# GID 0 (zero) is reserved for the root group.


# change user
su chad
su root

vim .bashrc
PS1="MyCustomPrompt $ "
source .bashrc

# bash history contains all command history

vim /etc/sudoers
sudo !!

# ENVIRONMENT VARIABLES
APP_VERSION=v2

# view all environment variables
env
printenv

# update packages
# package manager helps with installing software and all dependencies
apt update
apt search python
apt install -y python3
apt remove -y python3

# docker pre-requisites 
apt update && apt install -y ca-certificates \
curl \
gnupg \
lsb-release

# GPG, or GNU Privacy Guard, is a public key cryptography implementation. This allows for the secure transmission of information between parties and can be used to verify that the origin of a message is genuine
# apt-key is a program that is used to manage a keyring of gpg keys for secure apt.
mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# When installing packages using apt the packages are downloaded from one or more apt software repositories. 
# An APT repository is a network server or a local directory containing deb packages and metadata files that are readable by the APT tools.
# While there are thousands of application available in the default Ubuntu repositories, sometimes you may need to install software from a 3rd party repository.

# add docker 3rd party repository
echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# pull down packages locally
apt search docker-ce
apt update
apt search docker-ce

# install  Docker Engine, containerd, and Docker Compose
apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# show docker-ce package metadata from repository
# madison is the name of the Debian archive management tool used for all debian and debian-like distros
apt-cache madison docker-ce

# install a specific version
apt install -y docker-ce=5:20.10.17~3-0~ubuntu-focal docker-ce-cli=5:20.10.17~3-0~ubuntu-focal containerd.io docker-compose-plugin

# verify its all working
docker run hello-world

# On Ubuntu and all other Debian based distributions, the apt software repositories are defined in the /etc/apt/sources.list file or in separate files under the /etc/apt/sources.list.d/ directory.
# The names of the repository files inside the /etc/apt/sources.list.d/ directory must end with .list.
cat /etc/apt/sources.list
ls /etc/apt/ # see sources.list.d
